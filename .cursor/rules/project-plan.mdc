### Исходные требования (из запроса заказчика)

1) Регистрация и авторизация
- Регистрация и вход по email и паролю.
- Использовать JWT. Подтверждение почты сейчас не делаем; восстановление пароля не делаем (нужно заложить на будущее через SMTP).

2) Пользователь после регистрации
- У пользователя создаётся кошелёк с балансом 0 ₽.
- Главный экран: кнопки под балансом и действия по переводу — захардкожены (бэкенд пока не подключаем к ним).
- «Избранное» приходит с бэкенда; если 0 элементов — блок не показывать.
- «Мои продукты» приходят с бэкенда; если 0 — блок не показывать.
- Рейтинг пользователя после регистрации — «средний».

3) Экран «Продукты»
- Подключён бэкенд — выводятся продукты, доступные по уровню рейтинга.
- Всего уровней рейтинга — 5. Набор продуктов фиксированный; для разных рейтингов — разный доступ.
- Продукты создаются в админке. Изначально заполнить продуктами из текущего демо.
- В админке настраивается соответствие «рейтинг → доступные продукты».

4) Открытие продукта «Накопительный счёт»
- При клике — отдельное окно со стрелкой «назад».
- Поле суммы пополнения (по умолчанию 0) и кнопка «Открыть».
- После нажатия — показать сообщение об успешном открытии счёта.
- Счёт появляется на главном экране в разделе «Мои продукты».

5) Раздел «Рейтинг»
- Пока захардкожен, кроме верхней полоски — её заполнение зависит от рейтинга пользователя.

6) Профиль
- Аватарка, имя, рейтинг — с бэкенда.
- Пункт «Редактировать паспортные данные» активен: можно менять ФИО.
- Редактирование — отдельное окно со стрелкой «назад»: 3 поля (фамилия, имя, отчество) и кнопка «Сохранить».
- Валидация и отправка при нажатии на «Сохранить».
- Аватарку загружать не будем; использовать дефолтную иконку, если аватар не задан.

7) Меню
- В меню выводится актуальная аватарка пользователя.

8) Транзакции
- Экран со списком транзакций берёт данные с бэкенда.
- Транзакции можно создать в админке (например, перевод от «Тест Тестович») или выполнить реальный перевод (будущее; пока — заглушки методов).
- Интеграция с внешним подрядчиком — позже; пока нужны методы-заглушки.

9) Админка
- Список пользователей с возможностью создания и редактирования.
- Возможность изменить рейтинг пользователя, посмотреть список его транзакций, добавить транзакцию (пополнение и списание).
- Настройка доступности продуктов для каждого уровня рейтинга. Список продуктов фиксированный — заполнить как в текущей верстке.

### Уточнения и финальные договорённости

- БД/ORM: PostgreSQL + Prisma (оставляем Prisma).
- WebView: iOS и Android, загрузка по https. Рекомендация по токенам ниже (cookies + in-memory access).
- Доступность продуктов: в `Product` поле `allowedRatings: number[]`.
- `avatarUrl` из модели и API убираем; UI уже имеет дефолтный placeholder.
- «Избранное»: не реализуем на этом этапе (блок на главном не показываем).
- Транзакции из админки — полноценные переводы; отображаются как обычные. Поля: `direction, amountMinor, currency?, category, counterpartyName?, idempotencyKey?`.
- Категории транзакций: временно фиксированный список (например: transfer, topup, taxi, food, education, transport, shopping, entertainment, other). В будущем — маппинг банковских кодов.
- Продукты API: `GET /products` отдаёт все продукты для пользователя с флагом `isEnabled`; на фронте недоступные — disabled (как «Ипотека» сейчас).
- Документация API: OpenAPI 3.1, генерация из `zod` (`zod-to-openapi`), Swagger UI на `/docs` (опционально Redoc).

### Архитектурные правила проекта (обязательно к соблюдению)

- Монорепозиторий с npm workspaces.
- Пакеты и директории:
  - `apps/client` — клиентское приложение (React/Vite). Компоненты UI — без бизнес-логики.
  - `apps/admin` — админка (React/Vite), авторизация по роли admin.
  - `apps/server` — сервер (Express). Контроллеры без бизнес-логики (делегируют use-cases).
  - `packages/core` — бизнес-логика (use-cases, entities, services). DI через `tsyringe`.
  - `packages/api` — DTO, типы и typed-клиенты к API.
  - `packages/ui` — UI-компоненты (без логики), CSS Modules, готовые иконки и компоненты (`Text`, `Avatar`, `ProductCard`, `Rating`, ...).
- Clean Architecture: один use-case = один файл; зависимости внедряются через контейнер; UI и маршрутные обработчики — только «wire up».
- Путь-алиасы: `@core`, `@api`, `@packages/ui`.
- WebView/Responsive: использовать flex/grid/gap, `rem/%` для размеров; избегать `position: absolute`, `:hover`, `:focus-visible`.

### Контекст и цели

- **Цель**: Подключить бэкенд и БД к текущему проекту, реализовать регистрацию/авторизацию, профиль, кошелёк, продукты с зависимостью от рейтинга, транзакции и админку. Соблюдать текущую архитектуру: Clean Architecture, DI `tsyringe`, разделение на `@core`, `@api`, UI без бизнес-логики.
- **Окружение**: монорепозиторий npm workspaces. Приложение будет работать как WebView (iOS/Android) по https.

### Принятые решения

- **БД и ORM**: PostgreSQL + Prisma (миграции, сиды, типобезопасные запросы).
- **Аутентификация**: JWT (access + refresh). Рекомендованная для WebView стратегия:
  - Refresh-токен в HttpOnly+Secure cookie, SameSite=Lax (или None при необходимости); access-токен — в памяти (in-memory) клиента.
  - В случае ограничений cookie в контейнере WebView — fallback: хранение refresh в нативном Secure Storage и обмен через bridge.
- **Доступность продуктов**: в `Product` поле `allowedRatings: number[]` (1–5). Таблица `ProductAvailability` не нужна.
- **Сущности**: `UserProducts` (переименование с `UserProduct`). Убираем `avatarUrl`. Не создаём сущность `Favorite`.
- **Главный экран**: рейтинг-бейдж и баланс — с бэкенда (не локально). «Быстрые действия» под балансом остаются захардкоженными.
- **Профиль**: добавить пункт «Выйти» (logout).
- **Продукты (экран)**: метод `GET /products` отдаёт все продукты для пользователя с флагом `isEnabled`. Недоступные отображаются как disabled (как сейчас «Ипотека» — серая иконка/карточка).
- **Транзакции**: из админки можно создавать «настоящие» переводы — они отображаются как обычные у пользователя. Также поддерживаем stub-операции (на будущее — внешние провайдеры).
- **Категории транзакций**: временно фиксированный список (например: transfer, topup, taxi, food, education, transport, shopping, entertainment, other). Дальше — маппинг банковских кодов → категорий.
- **Документация API**: OpenAPI 3.1, генерация из `zod`-схем (`zod-to-openapi`), Swagger UI на `/docs` (опционально Redoc).
 - **Суммы**: везде используем минорные единицы с валютой (`amountMinor: number`, `currency`, по умолчанию `RUB`).
 - **Админские транзакции (дефолты сервера)**: при создании сервер устанавливает `status=posted`, `postedAt=now`; если `currency` не указана — используется `RUB`.

### Доменные сущности (ядро `@core`)

- **User**: `id`, `email`, `passwordHash`, `name{ lastName, firstName, middleName }`, `ratingLevel: 1|2|3|4|5` (начально 3 — «средний»), `isAdmin`, `createdAt`, `updatedAt`.
- **Wallet**: `id`, `userId`, `balance` (копейки/число — уточнить формат хранения; по умолчанию целые в минорных единицах).
 - **Transaction**: `id`, `userId`, `direction: debit|credit`, `amountMinor: number`, `currency: 'RUB'|...`, `category` (фиксированный список), `counterpartyName?`, `source: internal|admin|stub`, `status: posted|pending|failed|canceled`, `createdAt`, `postedAt`, `updatedAt`, `metadata?`, `transferGroupId?`, `idempotencyKey?`.
- **Product**: `id`, `code` (например, `SAVINGS`), `title`, `subtitle`, `icon`, `iconColor`, `iconBg`, `category: saving|credit`, `allowedRatings: number[]`, `isActive`.
- **UserProducts**: `id`, `userId`, `productId`, `status: active|closed`, `openedAt`, `initialDeposit`.

### Основные пользовательские потоки

- **Регистрация/логин**: по email+пароль, без подтверждения почты. При регистрации создаём `Wallet` с балансом 0 ₽, `ratingLevel=3`.
- **Главный экран**: рейтинг-бейдж и баланс — с бэкенда; «Избранное» пока не делаем; «Мои продукты» — с бэкенда (скрывать блок, если пусто). Быстрые действия — захардкожены.
- **Продукты**: `GET /products` выдаёт все продукты с `isEnabled`; недоступные — disabled. Набор продуктов фиксированный (сид из текущей верстки). Доступность — по `allowedRatings`.
- **Открытие «Накопительный счёт»**: отдельный экран с вводом суммы (по умолчанию 0) и кнопкой «Открыть». POST создаёт запись в `UserProducts` (+ если сумма > 0 — уменьшаем баланс и создаём транзакцию). После — сообщение об успехе; продукт появляется в «Мои продукты».
- **Рейтинг (экран)**: контент — захардкожен, кроме полоски сверху — зависит от `ratingLevel` пользователя.
- **Профиль**: аватар (дефолтная заглушка), ФИО, рейтинг — с бэкенда. Пункт «Редактировать паспортные данные» открывает форму из 3 полей (фамилия, имя, отчество) с валидацией на сохранение. Добавляем пункт «Выйти».
- **Меню**: выводить актуальную аватарку (если нет — дефолт из UI-компонента `Avatar`).
- **Транзакции (кошелёк)**: список с бэкенда. В админке можно создавать операции (credit/debit, категория, контрагент по имени) — пользователю показываются как обычные переводы.

### API контракты (эскиз)

- Auth
  - `POST /auth/register`
  - `POST /auth/login`
  - `POST /auth/refresh`
  - `POST /auth/logout`
- Users
  - `GET /users/me` → профиль (ФИО, рейтинг)
  - `PATCH /users/me/profile` → изменение ФИО
  - `GET /users/me/wallet` → баланс
  - `GET /users/me/transactions?limit&cursor`
  - `GET /users/me/products` → активные продукты пользователя
- Products
  - `GET /products` → все продукты с `isEnabled` для текущего пользователя
  - `POST /products/open` { code: "SAVINGS", initialDeposit }
- Admin
  - Users: `GET /admin/users`, `POST /admin/users`, `PATCH /admin/users/:id`, `PATCH /admin/users/:id/rating`
  - Transactions: `GET /admin/users/:id/transactions`, `POST /admin/users/:id/transactions` { direction, amountMinor, currency?, category, counterpartyName?, idempotencyKey? }
  - Products: `GET /admin/products`, `PATCH /admin/products/:id`, `PATCH /admin/products/:id/access` (правка `allowedRatings`)

### Документация API

- OpenAPI 3.1.
- Валидация и типы: `zod`-схемы.
- Генерация спецификации: `zod-to-openapi`.
- Просмотр: Swagger UI на `/docs` (опционально Redoc).

### Интеграция WebView (токены, куки)

- Базовый вариант: refresh в HttpOnly+Secure cookie (SameSite=Lax/None), access в памяти. На 401 — фоновой вызов `/auth/refresh` и повтор запроса.
- Требования: загрузка фронта по https-домену; убедиться, что WebView пересылает cookies для XHR/fetch.
- Fallback: нативное хранение refresh и обмен через bridge.

### Шаги реализации

0) Подготовка демо-окружения и локальной БД
   - Репозиторий и ветки
   - GitHub Actions: создать `ci.yml` (установка, кеш, линт, билд, тесты для всех workspaces). Поднять сервис PostgreSQL для CI при необходимости.
   - Секреты/vars репозитория: `JWT_SECRET`, `COOKIE_DOMAIN`, `NODE_ENV`, (для CI) `DATABASE_URL` или параметры PostgreSQL сервиса.
   - Шаблоны окружения: `.env.example` в корне и для `apps/server` (включая `DATABASE_URL`, `JWT_SECRET`, `PORT`, `COOKIE_DOMAIN`).
   - Docker Compose (локально): `postgres:16`, `pgadmin`/`adminer`, volume для данных, публикация порта 5432.
   - Скрипты npm: `db:up` (docker compose up -d), `db:down`, `db:reset`, `db:migrate`, `db:seed`, `dev:server`, `dev:client`, `dev:admin`.
   - Prisma: инициализация `schema.prisma`, `prisma migrate dev`, `prisma generate`, `prisma db seed`.
   - Seed: создать админа (например, `admin@example.com` / временный пароль), тест-пользователя, продукты из демо, матрицу `allowedRatings`.
   - Проверка: контейнер Postgres запущен; команды миграций/сидов проходят; сервер поднимается; `/health` → 200; `/docs` доступен.

1) Инфраструктура
   - Настроить PostgreSQL, Prisma (`schema.prisma`, `.env`).
   - Скелет `apps/server`: Express, CORS, cookies, JSON, helmet, rate-limit, error middleware, health-check.
   - Пакеты `@core` (сущности, интерфейсы репозиториев, use-cases, DI `tsyringe`) и `@api` (DTO, клиенты, типы).

2) Модели и миграции (Prisma)
   - Описать модели: `User`, `Wallet`, `Transaction`, `Product`, `UserProducts`.
   - Миграции и сиды: продукты из текущей верстки, `allowedRatings`, админ-пользователь, тест-пользователь, кошельки, несколько транзакций.

3) Аутентификация (JWT)
   - Use-cases: `RegisterUser`, `LoginUser`, `RefreshToken`, `LogoutUser`.
   - Реализации портов: UserRepository, PasswordHasher (argon2/bcrypt), TokenService.
   - Эндпоинты `/auth/*`, middleware для защиты, роль admin для `/admin/*`.

4) Пользователь и профиль
   - Use-cases: `GetMe`, `UpdatePassportData`.
   - Эндпоинты: `GET /users/me`, `PATCH /users/me/profile`.
   - Клиент: на главном экране брать рейтинг и баланс с бэкенда; в профиле — ФИО/рейтинг, пункт «Выйти».

5) Продукты
   - Use-case: `ListProductsWithAvailabilityForUser`.
   - `GET /products` → все продукты с `isEnabled` (по `allowedRatings`).
   - Экран «Продукты»: отображать disabled карточки, как сейчас «Ипотека».

6) Открытие «Накопительный счёт»
   - Use-case: `OpenSavingsAccount` (проверить доступность по рейтингу; если `initialDeposit > 0` — списать с кошелька и создать транзакцию).
   - `POST /products/open`.
   - Клиент: экран с суммой (0 по умолчанию), «Открыть», сообщение об успехе, обновление «Моих продуктов».

7) Транзакции
   - Use-cases: `ListUserTransactions`, `AdminCreateTransaction`.
   - `GET /users/me/transactions` в кошельке.
   - В админке `POST /admin/users/:id/transactions` (direction, amount, category, counterpartyName?).

8) Админка (`apps/admin`)
   - Users: список, создание, редактирование (ФИО, email, рейтинг, роль), просмотр транзакций, добавление транзакции.
   - Products: список (из сида), редактирование, `allowedRatings`.
   - Авторизация админа через `/auth/login` + guard.

9) Документация и качество
   - Генерировать OpenAPI из `zod` и публиковать Swagger UI `/docs`.
   - Unit-тесты use-cases (`@core`), интеграционные API (supertest), линтеры/преттьер.
   - Логирование (pino), обработка ошибок, валидация входов/выходов.

10) Безопасность и будущее
   - Хеширование паролей (argon2/bcrypt), обновление токенов, блок-лист при необходимости.
   - SMTP и внешний провайдер переводов: определить интерфейсы в `@core`, заглушки в сервере.

11) Инфраструктура развертывания (staging/production)
   - Контейнеризация: Dockerfile для `apps/server` (multi-stage), .dockerignore; при деплое: `prisma migrate deploy` + `prisma generate`.
   - Staging: деплой контейнера (например, Render/Railway/ваш провайдер); переменные окружения: `DATABASE_URL`, `JWT_SECRET`, `COOKIE_DOMAIN`, `NODE_ENV=production`.
   - Production: аналогично staging; секреты в GitHub Environments; ограничить доступ по IP/домену.
   - GitHub Actions CD: `deploy-staging.yml` на push в `main` → сборка образа, публикация/деплой, выполнение миграций.
   - Мониторинг/обслуживание: health-check, логи pino, алерты по ошибкам (по возможности).

### Промежуточные проверки (после каждого шага)

- Шаг 0: Postgres в Docker доступен; `prisma migrate dev` и `prisma db seed` проходят; сервер стартует; `/health` 200; `/docs` открывается.
- Шаг 1: линтеры и сборка зелёные; health-check и базовые middlewares работают; CORS и cookies настроены.
- Шаг 2: миграции применяются; таблицы `User`, `Wallet`, `Transaction`, `Product`, `UserProducts` созданы; seed заполняет продукты и `allowedRatings`.
- Шаг 3: через curl/Postman `register`/`login` возвращают access; refresh-cookie ставится; `refresh` выдаёт новый access; `logout` очищает cookie.
- Шаг 4: `GET /users/me` возвращает ФИО/рейтинг; `PATCH /users/me/profile` сохраняет ФИО; баланс из `/users/me/wallet` корректный.
- Шаг 5: `GET /products` возвращает все продукты; у недоступных `isEnabled=false` согласно `allowedRatings`.
- Шаг 6: `POST /products/open` создаёт запись в `UserProducts`; при `initialDeposit>0` — баланс кошелька уменьшается, создаётся `Transaction` (credit/debit по логике); «Мои продукты» обновляются.
- Шаг 7: `GET /users/me/transactions` возвращает ленту; `POST /admin/users/:id/transactions` создаёт запись, она видна пользователю.
- Шаг 8: эндпоинты админки для пользователей/продуктов/транзакций работают под admin-JWT; права доступа проверяются.
- Шаг 9: Swagger `/docs` синхронизирован со схемами `zod`; схемы запросов/ответов валидируются.
- Шаг 10: пароли хешируются; rate-limit и helmet активны; токены безопасны; интерфейсы SMTP/провайдера подключены как заглушки.
- Шаг 11: staging развёрнут; миграции применяются при деплое; `/health` и `/docs` доступны по https; логи поступают.

### Критерии готовности

- Регистрация/логин/рефреш/логаут работают; кошелёк создаётся (0 ₽), рейтинг=3.
- Главный экран: рейтинг и баланс с бэкенда; «Мои продукты» с бэкенда; скрытие секций при пустых данных.
- Продукты: приходят с `isEnabled`; disabled корректно отображаются.
- Открытие «Накопительный» — создаёт запись и (при взносе) транзакцию; продукт виден в «Моих продуктах».
- Рейтинг-экран: полоса соответствует `ratingLevel`.
- Профиль: ФИО/рейтинг с бэкенда; изменение ФИО; пункт «Выйти» работает.
- Кошелёк: транзакции с бэкенда; админские операции видны как обычные.
- Админка: пользователи (CRUD, рейтинг), транзакции (список/создание), продукты (`allowedRatings`).
- Документация: Swagger UI `/docs` актуален.

